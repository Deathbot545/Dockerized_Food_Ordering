<style>
    body {
        font-family: 'Arial', sans-serif;

    }

    .container {
      
        border-radius: 5px;
        box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
        padding: 10px;
    }

    h5 {
        border-bottom: 2px solid #e0e0e0;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }

    .form-check-label {
        font-size: 16px;
    }

    .input-group {
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05);
    }

    .btn-outline-secondary, .btn-primary {
        transition: all 0.3s ease;
    }

        .btn-outline-secondary:hover {
            background-color: #007bff;
            color: #ffffff;
        }
    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }
    h3 {
        border-top: 2px solid #e0e0e0;
        padding-top: 20px;
    }

    span.float-end {
        font-weight: bold;
    }

    .remove-item {
        margin-left: 10px;
        border: none;
        background-color: transparent;
        font-size: 18px;
        color: red;
        cursor: pointer;
        transition: 0.3s ease;
    }

        .remove-item:hover {
            transform: scale(1.1);
        }
</style>

<div class="container my-5">
    <div class="row">
        <!-- Order Summary Section -->
        <div class="col-md-6">
            <h5>Order summary</h5>
            <div id="order-summary-section">
                <!-- Items will be populated here -->
            </div>
            <a href="#" class="text-decoration-none">See all</a>
            <!-- Extras Section -->
            <h5 class="mt-4">Add Extras</h5>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" name="addUtensils" id="addUtensils">
                <label class="form-check-label" for="addUtensils">
                    Add utensils
                </label>
            </div>
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Request extra items">
                <button class="btn btn-outline-secondary" type="button" id="addExtras">Add</button>
            </div>
        </div>

        <!-- Order Total Section -->
        <div class="col-md-6">
            <h5>Order total</h5>
            <div class="mb-3">
                <span>Subtotal</span>
                <span class="float-end subtotal">LKR 0.00</span>
            </div>
            <h3 class="mb-3">
                <span>Total</span>
                <span class="float-end total">LKR 0.00</span>
            </h3>
            <p>By proceeding to payment, you agree to our Terms of Use and acknowledge the Privacy Notice. You confirm you are at least 18 years of age.</p>
            <button class="btn btn-primary mt-3" id="order-button">Order</button>
        </div>
    </div>
</div>

<script>
    // Declare global variables to hold tableId and outletId
    var globalTableId = '@ViewBag.TableId';
    var globalOutletId = '@ViewBag.OutletId';
</script>
<!-- Include your external JS file here or inline your JS code below -->

<script>
    function loadCheckoutPage() {
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        let itemsHtml = '';
        let subTotal = 0;

        console.log("Cart loaded from localStorage:", cart);

        cart.forEach(item => {
            let itemTotal = item.qty * item.price;
            subTotal += itemTotal;

            let extraItemsHtml = '';
            if (item.extraItems && item.extraItems.length > 0) {
                item.extraItems.forEach(extraItem => {
                    extraItemsHtml += `
                        <div class="extra-item">
                            <span>${extraItem.name}</span>
                            <span class="float-end">LKR ${extraItem.price.toFixed(2)}</span>
                            <button class="btn btn-sm remove-extra-item" data-item-id="${item.id}" data-extra-item-id="${extraItem.id}">&times;</button>
                        </div>`;
                    itemTotal += extraItem.price; // Add the price of extra items to itemTotal
                });
            }

            itemsHtml += `
                <div class="mb-3">
                    <span>${item.name} (x${item.qty})</span>
                    <span class="float-end">LKR ${itemTotal.toFixed(2)}</span>
                    <button class="btn btn-sm remove-item" data-item-id="${item.id}">&times;</button>
                    ${item.note ? `<div class="note"><small>Note: ${item.note}</small></div>` : ''}
                    ${extraItemsHtml}
                </div>`;
        });

        let deliveryFee = $("input[name='delivery']:checked").attr("id") === "priority" ? 0 : 0;
        let taxes = subTotal * 0;

        $("#order-summary-section").html(itemsHtml);
        $(".subtotal").text(`LKR ${subTotal.toFixed(2)}`);
        $(".delivery-fee").text(`LKR ${deliveryFee.toFixed(2)}`);
        $(".taxes").text(`LKR ${taxes.toFixed(2)}`);
        $(".total").text(`LKR ${(subTotal + deliveryFee + taxes).toFixed(2)}`);

        $(document).on('click', '.remove-extra-item', function () {
            const itemId = $(this).data('item-id');
            const extraItemId = $(this).data('extra-item-id');
            console.log(`Attempting to remove extra item ${extraItemId} from item ${itemId}`);
            removeExtraItemFromCart(itemId, extraItemId);
        });
    }


    $(document).ready(function () {
        console.log("Document ready. Loading checkout page.");
        loadCheckoutPage();

        $(document).on('click', '.remove-item', function () {
            const itemId = $(this).data('item-id');
            console.log(`Attempting to remove item from cart: ${itemId}`);
            removeItemFromCart(itemId);
        });

        $('#order-button').click(function () {
            submitOrderForm();
        });
    });

    function submitOrderForm() {
        showLoadingOverlay();

        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        if (cart.length === 0) {
            console.error("Attempted to submit order form with an empty cart.");
            return; // Optionally show an error message to the user
        }

        const formData = new FormData();
        formData.append('tableId', cart[0].tableId);
        formData.append('outletId', cart[0].outletId);
        cart.forEach((item, index) => {
            console.log(`Item ${index} Note:`, item.note); // Log the note
            formData.append(`items[${index}].id`, item.id);
            formData.append(`items[${index}].qty`, item.qty);
            formData.append(`items[${index}].price`, item.price);
            formData.append(`items[${index}].name`, item.name);
            formData.append(`items[${index}].note`, item.note); // Ensure note is included
        });

        for (let [key, value] of formData.entries()) {
            console.log(`${key}: ${value}`); // Log the FormData entries
        }

        fetch('/Order/CreateOrUpdateOrder', {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                if (data.orderId) {
                    localStorage.removeItem('cart');
                    localStorage.setItem('currentOrder', JSON.stringify({ orderId: data.orderId, status: 0 }));
                    setupSignalRConnection(data.orderId);
                    hideLoadingOverlay();
                    checkAndUpdateOrderStatus();
                    console.log("Order placed successfully with orderId: ", data.orderId);
                } else {
                    console.error("Order placement failed or orderId missing in response");
                }
            })
            .catch(error => {
                console.error('Error submitting order form:', error);
                hideLoadingOverlay();
            });

        return false;
    }

    function createHiddenInput(name, value) {
        let input = document.createElement('input');
        input.type = 'hidden';
        input.name = name;
        input.value = value;
        return input;
    }

    function removeFromCart(itemKey) {
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        console.log("Attempting to remove item from cart: ", itemKey);

        cart = cart.filter(item => item.itemKey !== itemKey);

        localStorage.setItem('cart', JSON.stringify(cart));
        updateCartButton();
    }


    


</script>
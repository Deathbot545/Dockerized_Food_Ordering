<style>
    .cart-fixed-bottom {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        background-color: #343a40;
        color: white;
        padding: 10px 20px;
        text-align: center;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
    }

    .food-image {
        width: 400px;
        height: 300px;
        object-fit: cover;
        box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.1);
    }

    .image-container {
        position: relative;
    }

    .back-button {
        position: absolute;
        top: -40px;
        left: 10px;
        z-index: 10;
    }

    #cart-button {
        z-index: 1000;
        background-color: #ff6347; /* Tomato color for the cart button */
        border-radius: 10px; /* Rounded corners for the cart button */
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
        padding: 10px 20px; /* Added padding */
        color: white; /* White text color */
    }
</style>
<div class="container my-5" style="padding-top: 50px;">
    <!-- Added padding to the container -->
    <div class="row">
        <div class="col-md-6" style="position: relative;">
            <!-- Back Button -->
            <a href="javascript:void(0)" onclick="goBack()" class="btn btn-link back-button">← Back to @ViewBag.CustomerFacingName</a>

            <!-- Image -->
            <img class="img-fluid rounded food-image" alt="Food Image">

        </div>
        <div class="col-md-6">
            <!-- Title and Price -->
            <h2 class="mb-3">Loading... <span class="text-primary">LKR 0.00</span></h2>

            <!-- Description -->
            <p id="food-description">Loading...</p>

            <!-- Rating -->
            <p><span class="text-success">👍 Loading...</span> (0)</p>

            <!-- Packaging Charges Section -->
            <div class="mb-3">
                <label><strong>Packaging Charges</strong></label>
                <div class="border rounded p-3">
                    <label><input type="radio" name="packaging" required> Additional Charges <span class="ml-2">+LKR 109.00</span></label>
                </div>
            </div>

            <!-- Quantity Selector -->
            <div class="mb-3">
                <label for="inputQuantitySelector" class="form-label"><strong>Quantity:</strong></label>
                <div class="input-group">
                    <button type="button" class="btn btn-icon btn-secondary" onclick="decrementQuantity()">
                        &#8722; <!-- Minus symbol -->
                    </button>
                    <input type="number" id="inputQuantitySelector" class="form-control text-center" name="quantity" aria-label="Quantity" value="1" min="1" max="100">
                    <button type="button" class="btn btn-icon btn-secondary" onclick="incrementQuantity()">
                        &#43; <!-- Plus symbol -->
                    </button>
                </div>
            </div>

            <!-- Order Button -->
            <button class="btn btn-dark btn-lg btn-block" id="order-button">Add 1  LKR 0.00</button>
        </div>
    </div>
</div>
<div id="cart-button" class="cart-fixed-bottom">
    <div>
        <span id="cart-items-count">0</span> Items - LKR <span id="cart-total">0.00</span>
    </div>
    <button class="btn btn-primary call-waiter-button">Call Waiter</button>
</div>

<script>
    function incrementQuantity() {
        var input = document.getElementById('inputQuantitySelector');
        var currentValue = parseInt(input.value, 10);
        if (currentValue < 100) {
            input.value = currentValue + 1;
            updateOrderButton();
        }
    }
    function decrementQuantity() {
        var input = document.getElementById('inputQuantitySelector');
        var currentValue = parseInt(input.value, 10);
        if (currentValue > 1) {
            input.value = currentValue - 1;
            updateOrderButton();
        }
    }
    function updateOrderButton() {
        let quantity = parseInt($('#inputQuantitySelector').val());
        let total = parseFloat($('h2 span').text().replace('LKR ', '').trim()) * quantity;
        $('#order-button').text(`Add ${quantity} • LKR ${total.toFixed(2)}`);
    }
    function goBack() {
        window.history.back();
    }
    $(document).ready(function () {
        const menuItemId = '@ViewBag.ItemId';
        const apiEndpoint = `https://restosolutionssaas.com/api/MenuApi/GetMenuItem/${menuItemId}`;
        $('#inputQuantitySelector').on('input change', updateOrderButton);
        // Fetch the data from the API
        $.ajax({
            url: apiEndpoint,
            method: 'GET',
            success: function (data) {
                // Populate the HTML elements with the fetched data
                if (data && data.image) {
                    $('img').attr('src', 'data:image/png;base64,' + data.image);
                } else {
                    console.error("Image data is missing or invalid:", data);
                }

                if (data && data.price) {
                    $('h2').html(data.name + ' <span class="text-primary">LKR ' + data.price.toFixed(2) + '</span>');
                } else {
                    console.error("Price data is missing or invalid:", data);
                }
                $('#food-description').text(data.description);
                // For the rating, I am assuming you'll provide the rating and total votes in your data, for now I'm hardcoding
                $('p').eq(2).html('<span class="text-success">👍 ' + data.Rating + '%</span> (' + data.Votes + ')');  // Adjust as per your API data
            },
            error: function (error) {
                console.error("Error fetching data:", error);
            }
        });

        // Cart functions
        function updateCartButton() {
            let cart = JSON.parse(localStorage.getItem('cart')) || [];
            let currentTime = new Date().getTime();
            let durationLimit = 24 * 60 * 60 * 1000; // Duration limit in milliseconds (e.g., 24 hours)

            // Filter out items that are older than the duration limit
            cart = cart.filter(item => currentTime - item.timestamp < durationLimit);

            // Update the cart in local storage after filtering out old items
            localStorage.setItem('cart', JSON.stringify(cart));

            let itemCount = cart.reduce((count, item) => count + item.qty, 0);
            let total = cart.reduce((total, item) => total + (item.price * item.qty), 0).toFixed(2);

            $("#cart-items-count").text(itemCount);
            $("#cart-total").text(total);

            if (itemCount > 0) {
                $('#cart-button').show();
            } else {
                $('#cart-button').hide();
            }
        }

        // This will be called when an item is added to the cart
        $('#order-button').click(function () {
            const qty = parseInt($('#inputQuantitySelector').val());
            const price = parseFloat($('h2 span').text().replace('LKR', '').trim());
            const h2Text = $('h2').text();
            const priceText = $('h2 span').text();
            const name = h2Text.replace(priceText, '').trim();
            const tableId = '@ViewBag.TableId';
            const outletId = '@ViewBag.OutletId'; // Get outletId from ViewBag

            addToCart({
                id: '@ViewBag.ItemId'.toString(),
                name: name,
                qty: qty,
                price: price,
                tableId: tableId, // Including tableId in the item data
                outletId: outletId // Including outletId in the item data
            });
        });

        function addToCart(item) {
            let cart = JSON.parse(localStorage.getItem('cart')) || [];
            let existingItem = cart.find(x => x.id === item.id);
            let timestamp = new Date().getTime(); // Current timestamp in milliseconds

            // Check if the item already exists in the cart
            if (existingItem) {
                existingItem.qty += item.qty;
                existingItem.timestamp = timestamp; // Update timestamp
                existingItem.tableId = item.tableId; // Ensure tableId is updated if necessary
                existingItem.outletId = item.outletId; // Ensure outletId is included and updated if necessary
            } else {
                // If the item is new, include tableId and outletId
                item.timestamp = timestamp; // Add timestamp
                cart.push({
                    ...item,
                    outletId: '@ViewBag.OutletId' // Include outletId when adding a new item
                });
            }
            localStorage.setItem('cart', JSON.stringify(cart));
            updateCartButton();
        }

        $('#cart-button').click(function () {
            window.location.href = '/Order/Checkout';
        });

        // Add functionality for the Call Waiter button
        $('#cart-button').on('click', '.call-waiter-button', function () {
            const tableId = '@ViewBag.TableId'; // Assuming tableId is available in ViewBag
            console.log("Call Waiter button clicked. Table ID:", tableId); // Log the button click and table ID
            $.ajax({
                url: 'https://restosolutionssaas.com/api/OrderApi/CallWaiter',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ tableId: tableId }),
                success: function () {
                    console.log("Waiter call sent successfully."); // Log successful response
                    alert("Waiter has been called!");
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error("Error calling waiter:", textStatus, errorThrown); // Log error details
                }
            });
        });

        // Initialization
        $(document).ready(function () {
            updateCartButton();
        });
    });
</script>

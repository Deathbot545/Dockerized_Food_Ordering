<style>
    .cart-fixed-bottom {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        background-color: #343a40;
        color: white;
        padding: 10px 20px;
        text-align: center;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
    }

    .food-image {
        width: 400px;
        height: 300px;
        object-fit: cover;
        box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.1);
    }

    .image-container {
        position: relative;
    }

    .back-button {
        position: absolute;
        top: -40px;
        left: 10px;
        z-index: 10;
    }

    #cart-button {
        z-index: 1000;
        background-color: #ff6347; /* Tomato color for the cart button */
        border-radius: 10px; /* Rounded corners for the cart button */
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
        padding: 10px 20px; /* Added padding */
        color: white; /* White text color */
    }
</style>
<div class="container my-5" style="padding-top: 50px;">
    <div class="row">
        <div class="col-md-6" style="position: relative;">
            <a href="javascript:void(0)" onclick="goBack()" class="btn btn-link back-button">← Back to @ViewBag.CustomerFacingName</a>
            <img class="img-fluid rounded food-image" alt="Food Image">
        </div>
        <div class="col-md-6">
            <h2 class="mb-3">Loading... <span class="text-primary">LKR 0.00</span></h2>
            <p id="food-description">Loading...</p>
            <p><span class="text-success">👍 Loading...</span> (0)</p>

            <div class="mb-3">
                <label><strong>Select Size</strong></label>
                <div id="size-options" class="border rounded p-3">
                    <!-- Size options will be populated here by JavaScript -->
                </div>
            </div>

            <div class="mb-3">
                <label><strong>Extra Items</strong></label>
                <div id="extra-items" class="border rounded p-3">
                    <!-- Extra items will be populated here by JavaScript -->
                </div>
            </div>


            <div class="mb-3">
                <label for="inputQuantitySelector" class="form-label"><strong>Quantity:</strong></label>
                <div class="input-group">
                    <button type="button" class="btn btn-icon btn-secondary" onclick="decrementQuantity()">
                        &#8722;
                    </button>
                    <input type="number" id="inputQuantitySelector" class="form-control text-center" name="quantity" aria-label="Quantity" value="1" min="1" max="100">
                    <button type="button" class="btn btn-icon btn-secondary" onclick="incrementQuantity()">
                        &#43;
                    </button>
                </div>
            </div>

            <div class="mb-3">
                <label for="inputNote" class="form-label"><strong>Note:</strong></label>
                <textarea id="inputNote" class="form-control" rows="3" placeholder="Add your notes here (e.g., extra cheese, no tomato)"></textarea>
            </div>

            <button class="btn btn-dark btn-lg btn-block" id="order-button">Add 1 • LKR 0.00</button>
        </div>
    </div>
</div>
<div id="cart-button" class="cart-fixed-bottom">
    <div>
        <span id="cart-items-count">0</span> Items - LKR <span id="cart-total">0.00</span>
    </div>
    <button class="btn btn-primary call-waiter-button">Call Waiter</button>
</div>

<script>
    function incrementQuantity() {
        var input = document.getElementById('inputQuantitySelector');
        var currentValue = parseInt(input.value, 10);
        if (currentValue < 100) {
            input.value = currentValue + 1;
            updateOrderButton();
        }
    }

    function decrementQuantity() {
        var input = document.getElementById('inputQuantitySelector');
        var currentValue = parseInt(input.value, 10);
        if (currentValue > 1) {
            input.value = currentValue - 1;
            updateOrderButton();
        }
    }

    function updateOrderButton() {
        let quantity = parseInt($('#inputQuantitySelector').val());
        let sizePrice = parseFloat($('input[name="size"]:checked').data('price')) || 0;
        let extraItemsPrice = 0;
        $('input[name="extra-item"]:checked').each(function () {
            extraItemsPrice += parseFloat($(this).data('price')) || 0;
        });
        let total = (sizePrice + extraItemsPrice) * quantity;
        $('#order-button').text(`Add ${quantity} • LKR ${total.toFixed(2)}`);
    }


    function goBack() {
        window.history.back();
    }

    $(document).ready(function () {
        // Check if data is available in local storage
        const foodItemData = JSON.parse(localStorage.getItem('foodItemData'));

        if (!foodItemData) {
            // If no data is found, redirect back to the menu page
            window.location.href = '/Menu';
            return;
        }

        const menuItemId = foodItemData.itemId;
        const customerFacingName = foodItemData.customerFacingName;
        const menuId = foodItemData.menuId; // Retrieve menu ID
        const categoryId = foodItemData.categoryId;

        // Set the customer facing name
        $('#customerFacingName').text(customerFacingName);

        const apiEndpoint = `https://restosolutionssaas.com/api/MenuApi/GetMenuItem/${menuItemId}?menuId=${menuId}`; // Use menu ID in API call
        const extraItemsEndpoint = `https://restosolutionssaas.com/api/MenuApi/GetCategoryWithExtraItems/${categoryId}`; // Use menu ID to get extra items
        $('#inputQuantitySelector').on('input change', updateOrderButton);

        // Fetch menu item details
        $.ajax({
            url: apiEndpoint,
            method: 'GET',
            success: function (data) {
                if (data && data.image) {
                    $('img.food-image').attr('src', 'data:image/png;base64,' + data.image);
                } else {
                    console.error("Image data is missing or invalid:", data);
                }

                if (data && data.price) {
                    $('h2').html(data.name + ' <span class="text-primary">LKR ' + data.price.toFixed(2) + '</span>');
                } else {
                    console.error("Price data is missing or invalid:", data);
                }
                $('#food-description').text(data.description);
                $('p').eq(2).html('<span class="text-success">👍 ' + data.Rating + '%</span> (' + data.Votes + ')');

                let sizeOptionsHtml = '';
                data.sizes.forEach(size => {
                    sizeOptionsHtml += `<div class="form-check">
                                              <input class="form-check-input" type="radio" name="size" value="${size.size}" data-price="${size.price}" id="size-${size.size}">
                                              <label class="form-check-label" for="size-${size.size}">
                                                  ${size.size} - LKR ${size.price.toFixed(2)}
                                              </label>
                                           </div>`;
                });
                $('#size-options').html(sizeOptionsHtml);
                $('input[name="size"]').on('change', updateOrderButton);
            },
            error: function (error) {
                console.error("Error fetching data:", error);
            }
        });

        // Fetch extra items
        $.ajax({
            url: extraItemsEndpoint,
            method: 'GET',
            success: function (data) {
                if (data && data.extraItems) {
                    let extraItemsHtml = '';
                    data.extraItems.forEach(item => {
                        extraItemsHtml += `<div class="form-check">
                                                <input class="form-check-input" type="checkbox" name="extra-item" value="${item.id}" data-price="${item.price}" id="extra-item-${item.id}">
                                                <label class="form-check-label" for="extra-item-${item.id}">
                                                    ${item.name} - LKR ${item.price.toFixed(2)}
                                                </label>
                                           </div>`;
                    });
                    $('#extra-items').html(extraItemsHtml);
                    $('input[name="extra-item"]').on('change', updateOrderButton);
                } else {
                    console.error("Extra items data is missing or invalid:", data);
                }
            },
            error: function (error) {
                console.error("Error fetching extra items:", error);
            }
        });

        // Cart functions
        function updateCartButton() {
            let cart = JSON.parse(localStorage.getItem('cart')) || [];
            let currentTime = new Date().getTime();
            let durationLimit = 24 * 60 * 60 * 1000;

            cart = cart.filter(item => currentTime - item.timestamp < durationLimit);
            localStorage.setItem('cart', JSON.stringify(cart));

            let itemCount = cart.reduce((count, item) => count + item.qty, 0);
            let total = cart.reduce((total, item) => {
                let itemTotal = item.price * item.qty;
                if (item.extraItems && item.extraItems.length > 0) {
                    item.extraItems.forEach(extraItem => {
                        itemTotal += extraItem.price * item.qty;
                    });
                }
                return total + itemTotal;
            }, 0).toFixed(2);

            $("#cart-items-count").text(itemCount);
            $("#cart-total").text(total);

            if (itemCount > 0) {
                $('#cart-button').show();
            } else {
                $('#cart-button').hide();
            }
        }


        $('#order-button').click(function () {
            const qty = parseInt($('#inputQuantitySelector').val());
            const sizePrice = parseFloat($('input[name="size"]:checked').data('price')) || 0;
            const h2Text = $('h2').text();
            const priceText = $('h2 span').text();
            const name = h2Text.replace(priceText, '').trim();
            const note = $('#inputNote').val();
            const tableId = '@ViewBag.TableId';
            const outletId = '@ViewBag.OutletId';
            const size = $('input[name="size"]:checked').val();

            // Get selected extra items
            let extraItems = [];
            $('input[name="extra-item"]:checked').each(function () {
                extraItems.push({
                    id: $(this).val(),
                    name: $(this).siblings('label').text().trim(),
                    price: parseFloat($(this).data('price')) || 0
                });
            });

            addToCart({
                id: '@ViewBag.ItemId'.toString(),
                name: name,
                qty: qty,
                price: sizePrice,
                tableId: tableId,
                outletId: outletId,
                note: note,
                size: size,
                extraItems: extraItems // Include extra items here
            });
        });

        function addToCart(item) {
            let cart = JSON.parse(localStorage.getItem('cart')) || [];
            let itemKey = cart.length + 1; // Use the length of the cart array as the item key

            let existingItem = cart.find(x => x.itemKey === itemKey);

            let timestamp = new Date().getTime();

            if (existingItem) {
                existingItem.qty += item.qty;
                existingItem.timestamp = timestamp;
                existingItem.tableId = item.tableId;
                existingItem.outletId = item.outletId;
                existingItem.note = item.note;
            } else {
                item.timestamp = timestamp;
                item.itemKey = itemKey;
                cart.push(item);
            }

            localStorage.setItem('cart', JSON.stringify(cart));
            updateCartButton();
        }




        $('#cart-button').click(function () {
            window.location.href = '/Order/Checkout';
        });

        $('#cart-button').on('click', '.call-waiter-button', function () {
            const tableId = '@ViewBag.TableId';
            console.log("Call Waiter button clicked. Table ID:", tableId);
            $.ajax({
                url: 'https://restosolutionssaas.com/api/OrderApi/CallWaiter',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ tableId: tableId }),
                success: function () {
                    console.log("Waiter call sent successfully.");
                    alert("Waiter has been called!");
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error("Error calling waiter:", textStatus, errorThrown);
                }
            });
        });

        updateCartButton();
        function updateOrderButton() {
            let quantity = parseInt($('#inputQuantitySelector').val());
            let sizePrice = parseFloat($('input[name="size"]:checked').data('price')) || 0;
            let extraItemsPrice = 0;
            $('input[name="extra-item"]:checked').each(function () {
                extraItemsPrice += parseFloat($(this).data('price')) || 0;
            });
            let total = (sizePrice + extraItemsPrice) * quantity;
            $('#order-button').text(`Add ${quantity} • LKR ${total.toFixed(2)}`);
        }
    });
</script>
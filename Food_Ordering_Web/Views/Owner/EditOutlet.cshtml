
<style>
    .changed-input {
        background-color: #ffff99; /* Light yellow background */
        color: #000; /* Optional: Change text color if needed */
    }

</style>
<main class="container mt-5">
    <h1 class="display-4 fst mb-3">Edit Outlet</h1>
    <form class="row g-3" id="editOutletForm" enctype="multipart/form-data">
        <!-- Outlet Name (Internal) -->
        <div class="col-md-4">
            <label for="outletInternalName" class="form-label">Outlet Name (Internal)</label>
            <input type="text" class="form-control modified" id="internalOutletName" name="InternalOutletName" placeholder="Enter Internal Name" value="Preloaded Internal Name" required>
        </div>

        <!-- Customer-Facing Name -->
        <div class="col-md-4">
            <label for="outletCustomerName" class="form-label">Customer-Facing Name</label>
            <input type="text" class="form-control" id="customerFacingName" name="CustomerFacingName" placeholder="Enter Customer-Facing Name" value="Preloaded Customer Name" required>
        </div>

        <!-- Business Type -->
        <div class="col-md-4">
            <label for="businessTypeSelect" class="form-label">Business Type</label>
            <select class="form-select" id="businessType" name="BusinessType" required>
                <option value="">Choose...</option>
                <option value="fine-dining">Fine Dining Restaurant</option>
                <option value="fast-food">Fast-Food Chain</option>
                <option value="cafe">Cafe</option>
                <option value="other">Other</option>
                <!-- Add other options here -->
            </select>
        </div>

        <!-- Country -->
        <div class="col-md-6">
            <label for="countrySelect" class="form-label">Country</label>
            <select class="form-select" id="country" name="Country" required>
                <option value="">Choose...</option>
                <option value="usa">United States</option>
                <option value="canada">Canada</option>
                <option value="uk">United Kingdom</option>
                <!-- Add other options here -->
            </select>
        </div>

        <!-- City -->
        <div class="col-md-6">
            <label for="cityInput" class="form-label">City</label>
            <input type="text" class="form-control" id="city" name="City" required value="Preloaded City">
        </div>

        <!-- State -->
        <div class="col-md-3">
            <label for="stateSelect" class="form-label">State</label>
            <select class="form-select" id="state" name="State" required>
                <option selected disabled value="">Choose...</option>
                <option value="usa">United States</option>
                <option value="canada">Canada</option>
                <!-- Add other options here -->
            </select>
        </div>

        <!-- ZIP Code -->
        <div class="col-md-3">
            <label for="zipInput" class="form-label">Zip</label>
            <input type="text" class="form-control" id="zipInput" name="Zip" required value="Preloaded ZIP">
        </div>

        <!-- Street Address -->
        <div class="col-md-6">
            <label for="streetAddressInput" class="form-label">Street Address</label>
            <input type="text" class="form-control" id="streetAddress" name="StreetAddress" required value="Preloaded Address">
        </div>

        <!-- Postal Code -->
        <div class="col-md-6">
            <label for="postalCodeInput" class="form-label">Postal/ZIP Code</label>
            <input type="text" class="form-control" id="postalCode" name="PostalCode" required value="Preloaded Postal Code">
        </div>

        <div class="col-md-6">
            <label for="dateOpened" class="form-label">Date Opened</label>
            <input type="date" class="form-control" id="dateOpened" required>
            <div class="valid-feedback">Looks good!</div>
        </div>
        <div class="mb-3">
            <label for="validationTextarea" class="form-label">Discription</label>
            <textarea class="form-control" id="description" placeholder="Required example textarea" required></textarea>
            <div class="invalid-feedback">
                Please enter a Description about the Outlet.
            </div>
        </div>

        <div class="col-md-6">
            <label for="employeeCount" class="form-label">Employee Count</label>
            <input type="number" class="form-control" id="employeeCount" required>
            <div class="valid-feedback">Looks good!</div>
        </div>
        <div class="col-md-3">
            <label for="operatingHoursStart" class="form-label">Operating Hours Start</label>
            <input type="time" class="form-control" id="operatingHoursStart" required>
            <div class="valid-feedback">Looks good!</div>
        </div>
        <div class="col-md-3">
            <label for="operatingHoursEnd" class="form-label">Operating Hours End</label>
            <input type="time" class="form-control" id="operatingHoursEnd" required>
            <div class="valid-feedback">Looks good!</div>
        </div>

        <!-- Add this section to your HTML -->

        <div class="col-md-3">
            <label for="Contact" class="form-label">Contact</label>
            <input type="number" class="form-control" id="contact" name="Contact" placeholder="Contact number for outlet">
        </div>

        <div class="mb-3">

            <!-- Business Logo Preview and Upload -->
            <div class="col-md-6 mb-3">
                <label for="bussinesslogo" class="form-label">Business Logo</label>
                <div class="image-preview" id="businessLogoPreview">
                    <img id="logoImage" src="" alt="Business Logo" class="img-thumbnail mb-2" style="width: 100px; height: auto;">
                    <button type="button" class="btn btn-danger btn-sm" id="removeBusinessLogo">Remove</button>
                </div>
                <input type="file" class="form-control" aria-label="file example" id="bussinesslogo" name="Logo" hidden>
                <button type="button" class="btn btn-primary btn-sm" id="changeBusinessLogo">Change Logo</button>
            </div>

            <!-- Restaurant Image Preview and Upload -->
            <div class="col-md-6 mb-3">
                <label for="restaurentimage" class="form-label">Restaurant Image</label>
                <div class="image-preview" id="restaurantImagePreview">
                    <img id="restaurantImage" src="" alt="Restaurant Image" class="img-thumbnail mb-2" style="width: 100px; height: auto;">
                    <button type="button" class="btn btn-danger btn-sm" id="removeRestaurantImage">Remove</button>
                </div>
                <input type="file" class="form-control" aria-label="file example" id="restaurentimage" name="RestaurantImage" hidden>
                <button type="button" class="btn btn-primary btn-sm" id="changeRestaurantImage">Change Image</button>
            </div>
        </div>
        <!-- Changes Summary Section -->
        <div class="col-12 summary" id="editSummary">
            <h4>Changes Summary</h4>
            <p>No changes made yet.</p>
        </div>

        <div class="col-12">
            <button class="btn btn-success" type="submit">Update Outlet</button>
        </div>
    </form>
</main>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const outletId = getQueryVariable('id');
        populateFormFields();
        setupFormChangeDetection();
        setupImageChangeHandlers();
        setupFormSubmission(outletId);
        fetchAndDisplayOutletImages(outletId);
    });

    function getQueryVariable(variable) {
        const query = window.location.search.substring(1);
        const vars = query.split('&').map(v => {
            const [key, value] = v.split('=');
            return { key: decodeURIComponent(key), value: decodeURIComponent(value) };
        });
        const foundVar = vars.find(v => v.key === variable);
        return foundVar ? foundVar.value : null;
    }

    function populateFormFields() {
        const fieldsToQueryVariables = {
            '#internalOutletName': 'internalOutletName',
            '#customerFacingName': 'customerFacingName',
            '#businessType': 'businessType',
            '#zipInput': 'zip',
            '#streetAddress': 'streetAddress',
            '#postalCode': 'postalCode',
            '#dateOpened': 'dateOpened',
            '#description': 'description',
            '#employeeCount': 'employeeCount',
            '#operatingHoursStart': 'operatingHoursStart',
            '#operatingHoursEnd': 'operatingHoursEnd',
            '#contact': 'contact',
            '#country': 'country',
            '#state': 'state',
            '#city': 'city'
        };

        Object.entries(fieldsToQueryVariables).forEach(([fieldId, queryVariable]) => {
            let value = getQueryVariable(queryVariable);
            if (value !== null) {
                if (fieldId === '#dateOpened' && value) {
                    value = formatDate(value);
                }
                $(fieldId).val(value);
            }
        });

 
    }

    function formatDate(dateStr) {
        const parts = dateStr.split('/');
        if (parts.length === 3) {
            const [month, day, year] = parts;
            return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`; // Correct format for <input type="date">
        } else {
            // Return the original string if it doesn't match expected format
            return dateStr;
        }
    }

    function setupFormChangeDetection() {
        $('input, select, textarea').not(':input[type=file]').on('change input', function () {
            $(this).addClass('changed-input');
            updateChangeSummary();
        });
    }

    function setupImageChangeHandlers() {
        $('input[type="file"]').change(function () {
            const fileInput = $(this);
            const reader = new FileReader();
            const previewSelector = fileInput.data('preview');
            reader.onload = function (e) {
                $(previewSelector).attr('src', e.target.result).addClass('changed-input');
                fileInput.addClass('changed-input');
            };
            if (this.files[0]) reader.readAsDataURL(this.files[0]);
        });

        $('.remove-image').click(function () {
            const previewSelector = $(this).data('preview');
            const inputSelector = $(this).data('input');
            $(previewSelector).attr('src', '/path/to/default/image.png').removeClass('changed-input');
            $(inputSelector).val('').removeClass('changed-input');
        });
    }
    function updateChangeSummary() {
        const changedElements = $('.changed-input');
        const summaryContainer = $('#editSummary');

        summaryContainer.empty().append('<h4>Changes Summary</h4>');

        if (changedElements.length > 0) {
            const list = $('<ul></ul>');
            changedElements.each(function () {
                let label = $("label[for='" + $(this).attr('id') + "']").text();
                if (!label) {
                    // Fallback to using a placeholder or name attribute if the label isn't found
                    label = $(this).attr('placeholder') || $(this).attr('name') || 'Unnamed Field';
                }
                list.append($('<li></li>').text(`Changed ${label}`));
            });
            summaryContainer.append(list);
        } else {
            summaryContainer.append('<p>No changes made yet.</p>');
        }
    }


    function setupFormSubmission(outletId) {
        $('#editOutletForm').submit(async function (e) {
            e.preventDefault();

            const formData = new FormData();
            // Initialize your updateDTO with the outletId to ensure the Id is set correctly
            const updateDTO = {
                Id: parseInt(outletId, 10) // Make sure Id is an integer
            };

            // Collect data from inputs that have changed, excluding file inputs
            $('.changed-input').not(':input[type=file]').each(function () {
                updateDTO[this.name] = $(this).val();
            });

            console.log("Collected update data:", updateDTO);

            // Append the JSON data as a string.
            formData.append('updateDTO', JSON.stringify(updateDTO));

            // Append files to formData if any
            $('.changed-input:input[type=file]').each(function () {
                if (this.files[0]) {
                    formData.append(this.name, this.files[0]);
                }
            });

            try {
                console.log("Sending PATCH request to update outlet with ID:", outletId);

                const response = await fetch(`https://restosolutionssaas.com:7115/api/OutletApi/update/${outletId}`, {
                    method: 'PATCH',
                    body: formData, // Do not set Content-Type header manually, let the browser handle it
                });

                console.log("Response status:", response.status);

                if (response.ok) {
                    const data = await response.json();
                    console.log("Update successful:", data);
                    alert("Outlet updated successfully.");
                } else {
                    console.error("Update failed with status:", response.status);
                    response.text().then(text => {
                        console.error("Failed to update outlet. Error:", text);
                        alert("Failed to update outlet. Please check the console for more information.");
                    });
                }
            } catch (error) {
                console.error("Error during fetch:", error);
                alert("An error occurred. Please try again.");
            }
        });
    }








    function fetchAndDisplayOutletImages(outletId) {
        $.ajax({
            url: `https://restosolutionssaas.com:7115/api/OutletApi/GetOutletImages/${outletId}`,
            method: 'GET',
            success: function (data) {
                if (data.logoBase64) {
                    $('#logoImage').attr('src', `data:image/png;base64,${data.logoBase64}`);
                }
                if (data.restaurantImageBase64) {
                    $('#restaurantImage').attr('src', `data:image/png;base64,${data.restaurantImageBase64}`);
                }
            },
            error: function (error) {
                console.error("Error fetching images:", error);
                // Handle error or set default images
            }
        });
    }
</script>
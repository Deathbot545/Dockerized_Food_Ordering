@model Core.ViewModels.OutletViewModel;
@using Core.DTO;
@using Infrastructure.Models;
@using Microsoft.AspNetCore.Html;
@using System.Text;
@functions {
    public static DateTime ConvertToCorrectTimeZone(DateTime dateTimeWithOffset)
    {
        TimeZoneInfo istTimeZone = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
        DateTime dateTimeInIST = TimeZoneInfo.ConvertTime(dateTimeWithOffset, istTimeZone);
        return dateTimeInIST;
    }
}

@{
    var pendingOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Pending) ?? Enumerable.Empty<OrderDTO>();
    var preparingOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Preparing) ?? Enumerable.Empty<OrderDTO>();
    var readyOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Ready) ?? Enumerable.Empty<OrderDTO>();
    var servedOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Served) ?? Enumerable.Empty<OrderDTO>();
}
@{
    Func<IEnumerable<OrderDTO>, IHtmlContent> RenderOrders = (orders) =>
        {
    var html = new StringBuilder();
    foreach (var order in orders)
    {
        var tableIdentifier = Model.Tables.FirstOrDefault(t => t.Id == order.TableId)?.TableIdentifier ?? "Unknown";
        var orderTimeInIST = ConvertToCorrectTimeZone(order.OrderTime).ToString("yyyy-MM-dd HH:mm:ss");

        html.Append($"<div class=\"card mb-3 order-card bg-light\" data-order-id=\"{order.Id}\">");
        html.Append($"<div class=\"card-header d-flex justify-content-between align-items-center bg-warning text-dark\">");
        html.Append($"<span>Order #{order.Id} | Table: {tableIdentifier} | <span style=\"font-weight: lighter;\">Date: {orderTimeInIST}</span></span>");
        html.Append($"<span>STATUS: {order.Status.ToString().ToUpper()}</span>");
        html.Append("</div><div class=\"card-body\"><ul class=\"mb-3\">");

        foreach (var detail in order.OrderDetails)
        {
            html.Append($"<li>{detail.MenuItem?.Name} x {detail.Quantity}</li>");
        }

        // Include the status update buttons
        html.Append("</ul>");
        html.Append("<div class=\"btn-group\" role=\"group\" aria-label=\"Order Status\">");
        html.Append($"<button type=\"button\" class=\"btn btn-warning {(order.Status == OrderStatus.Pending ? "active" : "")}\" data-status=\"pending\">Pending</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-primary {(order.Status == OrderStatus.Preparing ? "active" : "")}\" data-status=\"in-progress\">In Progress</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-success {(order.Status == OrderStatus.Ready ? "active" : "")}\" data-status=\"completed\">Completed</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-danger delete-order\" data-order-id=\"{order.Id}\">Delete Order</button>");
        html.Append("</div></div></div>");
    }
    return new HtmlString(html.ToString());
        };

}

<div class="container mt-5">
    <section id="pendingOrders">
        <h2>Pending Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Pending))
    </section>

    <section id="preparingOrders">
        <h2>Preparing Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Preparing))
    </section>

    <section id="readyOrders">
        <h2>Ready Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Ready))
    </section>

    <section id="servedOrders">
        <h2>Served Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Served))
    </section>
</div>



<!-- Footer -->
<footer class="footer mt-auto py-3 bg-dark text-white">
    <div class="container">
        <span class="text-muted">Quick Actions:</span>
        <!-- Quick action buttons, e.g., mark all orders as completed, print all pending orders, etc. -->
    </div>
</footer>
<script>
   

    $(document).ready(function () {

        // Establish SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("https://restosolutionssaas.com:7268/orderStatusHub")
            .configureLogging(signalR.LogLevel.Information)
            .withAutomaticReconnect() // Enable automatic reconnect
            .build();

        // Listen for new orders
        connection.on("NewOrderPlaced", function (order) {
            console.log("New order received", order);
            // Dynamically add the new order to the DOM
            addNewOrderToDOM(order);
        });

        // Listen for order updates
        connection.on("ReceiveOrderUpdate", function (order) {
            console.log("Order status update received", order);
            updateOrderStatusUI(order);
            updateKitchenOrderStatusUI(order);
        });

        // Start the connection
        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

        // Hook up click events for the order status buttons
        $('.btn-group .btn').click(function () {
            const $btn = $(this);
            const $card = $btn.closest('.order-card');
            const orderId = parseInt($card.data('order-id'));
            const newStatus = $btn.data('status');

            updateOrderStatus(orderId, newStatus);
        });
    });

    function updateOrderStatus(orderId, newStatus) {
        // Convert string status to your OrderStatus enum
        let statusEnumValue;
        switch (newStatus) {
            case 'pending':
                statusEnumValue = 0; // Assuming 0 corresponds to 'Pending' in your enum
                break;
            case 'in-progress':
                statusEnumValue = 1; // Adjust these values based on your enum definition
                break;
            case 'completed':
                statusEnumValue = 2;
                break;
        }

        $.ajax({
            headers: {
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            url: 'https://restosolutionssaas.com:7268/api/OrderApi/UpdateOrderStatus',
            type: 'POST',
            data: JSON.stringify({
                OrderId: orderId,
                Status: statusEnumValue
            }),
            contentType: 'application/json',
            crossDomain: true,  // Add this line
            success: function (response) {
                console.log("Order status updated successfully.");
                // Update UI if necessary
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("AJAX Error:", textStatus);
                console.error("Response Text:", jqXHR.responseText);
                console.error("Error Thrown:", errorThrown);
            }

        });

        $('.delete-order').click(function () {
            const orderId = $(this).data('order-id');
            updateOrderStatusToRejected(orderId);
        });

        function updateOrderStatusToRejected(orderId) {
            if (confirm('Are you sure you want to reject this order?')) {
                const rejectedStatus = 4; // Assuming 'Rejected' corresponds to 4 in your enum
                $.ajax({
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    url: 'https://restosolutionssaas.com:7268/api/OrderApi/UpdateOrderStatus',
                    type: 'POST',
                    data: JSON.stringify({
                        OrderId: orderId,
                        Status: rejectedStatus
                    }),
                    contentType: 'application/json',
                    success: function (response) {
                        console.log("Order status updated to rejected successfully.");
                        location.reload(); // Optionally, reload or update UI dynamically here
                    },
                    error: function (error) {
                        console.error("Error updating order status to rejected:", error.responseText);
                        alert('Error updating order status. Please try again.');
                    }
                });
            }
        }

    }
</script>
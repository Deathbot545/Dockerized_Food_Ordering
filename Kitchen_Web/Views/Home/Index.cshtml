@using Microsoft.AspNetCore.Html;
@using System.Text;
@using Kitchen_Web.DTO;
@model Kitchen_Web.ViewModel.OutletViewModel;

@functions {
    public static DateTime ConvertToCorrectTimeZone(DateTime dateTimeWithOffset)
    {
        TimeZoneInfo istTimeZone = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
        DateTime dateTimeInIST = TimeZoneInfo.ConvertTime(dateTimeWithOffset, istTimeZone);
        return dateTimeInIST;
    }

    public static string RenderOrderCard(OrderDTO order, List<TableDTO> tables)
    {
        var tableIdentifier = tables.FirstOrDefault(t => t.Id == order.TableId)?.TableIdentifier ?? $"Unknown (ID: {order.TableId})";
        var orderTimeInIST = ConvertToCorrectTimeZone(order.OrderTime).ToString("yyyy-MM-dd HH:mm:ss");
        var statusText = order.Status.ToString().ToUpper();
        var html = new StringBuilder();
        html.Append($"<div class=\"card mb-3 order-card bg-light\" data-order-id=\"{order.Id}\" data-table-id=\"{order.TableId}\">");
        html.Append($"<div class=\"card-header d-flex justify-content-between align-items-center bg-warning text-dark\">");
        html.Append($"<span>Order #{order.Id} | Table: {tableIdentifier} | Date: {orderTimeInIST} | STATUS: {statusText}</span>");
        html.Append("</div><div class=\"card-body\"><ul class=\"mb-3\">");

        foreach (var detail in order.OrderDetails)
        {
            html.Append($"<li>{detail.MenuItem?.Name} x {detail.Quantity}</li>");
        }

        html.Append("</ul><div class=\"btn-group\" role=\"group\" aria-label=\"Order Status\">");
        html.Append($"<button type=\"button\" class=\"btn btn-warning {(order.Status == OrderStatus.Pending ? "active" : "")}\" data-status=\"pending\">Pending</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-primary {(order.Status == OrderStatus.Preparing ? "active" : "")}\" data-status=\"preparing\">In Progress</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-success {(order.Status == OrderStatus.Ready ? "active" : "")}\" data-status=\"completed\">Completed</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-danger {(order.Status == OrderStatus.Ready || order.Status == OrderStatus.Served ? "active" : "")}\" data-status=\"cancelled\">Cancel</button>");

        html.Append("</div></div></div>");

        return html.ToString();
    }
}

@{
    Func<OrderDTO, string> renderOrderCard = (order) =>
        RenderOrderCard(order, Model.Tables);

    // Dummy data for waiter calls
    var waiterCalls = new List<(int CallId, int TableId, string TableIdentifier)>
    {
        (1, 101, "Table 1"),
        (2, 102, "Table 2"),
        (3, 103, "Table 3")
    };
}

<div class="container mt-5">
    <div class="row">
        <div class="col-md-9">
            <section id="pendingOrders">
                <h2>Pending Orders</h2>
                @foreach (var order in Model.Orders.Where(o => o.Status == OrderStatus.Pending))
                {
                    @Html.Raw(renderOrderCard(order))
                }
            </section>

            <section id="preparingOrders">
                <h2>Preparing Orders</h2>
                @foreach (var order in Model.Orders.Where(o => o.Status == OrderStatus.Preparing))
                {
                    @Html.Raw(renderOrderCard(order))
                }
            </section>

            <section id="readyOrders">
                <h2>Ready Orders</h2>
                @foreach (var order in Model.Orders.Where(o => o.Status == OrderStatus.Ready))
                {
                    @Html.Raw(renderOrderCard(order))
                }
            </section>

            <section id="servedOrders">
                <h2>Served Orders</h2>
                @foreach (var order in Model.Orders.Where(o => o.Status == OrderStatus.Served))
                {
                    @Html.Raw(renderOrderCard(order))
                }
            </section>
        </div>
        <div class="col-md-3">
            <section id="waiterCalls">
                <h2>Waiter Calls</h2>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Call ID</th>
                            <th>Table</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var call in waiterCalls)
                        {
                            <tr>
                                <td>@call.CallId</td>
                                <td>@call.TableIdentifier</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </section>
        </div>
    </div>
</div>

<div class="container mt-3" id="cancelledOrdersSection">
    <h2>Recent Cancellations</h2>
    <div id="cancelledOrders"></div>
</div>

<!-- Footer -->
<footer class="footer mt-auto py-3 bg-dark text-white">
    <div class="container">
        <span class="text-muted">Quick Actions:</span>
        <!-- Quick action buttons, e.g., mark all orders as completed, print all pending orders, etc. -->
    </div>
</footer>
<script>
    $(document).ready(function () {
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("https://restosolutionssaas.com/api/OrderApi/orderStatusHub?isKitchen=true")
            .configureLogging(signalR.LogLevel.Information)
            .withAutomaticReconnect()
            .build();

        // Log connection object to ensure it includes methods
        console.log("SignalR connection object before adding method:", connection);

        // Define the ReceiveWaiterCall method before starting the connection
        connection.on("ReceiveWaiterCall", function (tableId) {
            console.log("ReceiveWaiterCall method triggered for table ID:", tableId);
            addWaiterCallToTable(tableId);
        });

        connection.on("ReceiveOrderUpdate", function (order) {
            console.log("ReceiveOrderUpdate method triggered with order:", order);
            if (order && order.orderId && typeof order.status !== 'undefined') {
                if (order.status === 4) { // Assuming 4 means 'Cancelled'
                    handleCancellationAlert(order);
                }
                updateOrderStatusUI(order);
                updateKitchenOrderStatusUI(order);
            } else {
                console.error("Order update is missing required properties", order);
            }
        });

        // Log connection object after adding methods
        console.log("SignalR connection object after adding methods:", connection);

        connection.start().then(function () {
            console.log("SignalR connection established");
        }).catch(function (err) {
            console.error("SignalR connection error:", err);
        });

        const statusMappings = {
            0: { text: "Pending", color: "#FFDDC1", section: 'pendingOrders' },
            1: { text: "In Progress", color: "#C1CEFF", section: 'preparingOrders' },
            2: { text: "Completed", color: "#C1FFD7", section: 'readyOrders' },
            3: { text: "Served", color: "#FFC1C1", section: 'servedOrders' },
            4: { text: "Cancelled", color: "grey" },
            default: { text: "Unknown", color: "#FFFFFF", section: 'unknownOrders' }
        };

        function handleCancellationAlert(order) {
            if (!notifiedCancellations[order.orderId]) {
                const cancellationAlert = `
                        <div class="alert alert-warning alert-dismissible fade show" role="alert">
                            Order #${order.orderId} has been cancelled by the customer.
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>`;
                $('#cancelledOrders').prepend(cancellationAlert);
                notifiedCancellations[order.orderId] = true;

                setTimeout(() => {
                    $(`.alert:contains('Order #${order.orderId}')`).alert('close');
                    delete notifiedCancellations[order.orderId];
                }, 300000); // 5 minutes
            }
        }

        function updateOrderStatusUI(order) {
            const orderCard = $(`.order-card[data-order-id="${order.orderId}"]`);
            const sectionId = statusMappings[order.status]?.section || statusMappings.default.section;
            if (order.status === 4) { // Cancelled
                orderCard.remove(); // Remove from current section
            } else {
                if (!orderCard.closest(`#${sectionId}`).length) {
                    orderCard.detach().appendTo(`#${sectionId}`); // Move to the correct section if needed
                }
            }
        }

        $(document).on('click', '.btn-group .btn', function () {
            const $btn = $(this);
            const orderId = $btn.closest('.order-card').data('order-id');
            const newStatus = $btn.data('status');

            if ($btn.hasClass('disabled')) {
                console.error("Button is disabled for order ID:", orderId);
                return; // Prevent action if the button is disabled
            }

            console.log("Clicked button:", $btn.text().trim(), "for order ID:", orderId, "to change status to:", newStatus);

            if (newStatus === "cancelled") {
                updateOrderStatusToCancelled(orderId); // Call the cancellation function if "Cancel" is clicked
            } else if (newStatus !== undefined) {
                updateOrderStatus(orderId, newStatus);
            } else {
                console.error("Undefined status for order ID:", orderId);
            }
        });

        updateAllTableNames();

        // Handle new orders and updates
        connection.on("NewOrderPlaced", function (order) {
            handleOrder(order, false);
        });

        connection.on("ReceiveOrderUpdate", function (order) {
            console.log("Update received for order", order.orderId, "New status:", order.Status);
            updateOrderStatusUI(order);
            updateKitchenOrderStatusUI(order);
        });

        // Function to handle new orders and updates
        function handleOrder(order, isUpdate) {
            const existingCard = $(`.order-card[data-order-id="${order.id}"]`);
            if (existingCard.length === 0 && !isUpdate) {
                // If it's a new order and no card exists
                addNewOrderToDOM(order);
            } else if (existingCard.length > 0 && isUpdate) {
                // If it's an update and the card exists
                updateOrderCard(order, existingCard);
            }
        }

        function addNewOrderToDOM(order) {
            const orderHtml = createOrderHtml(order);
            const sectionId = statusMappings[order.status]?.section || statusMappings.default.section;
            $('#' + sectionId).append(orderHtml);
        }

        function updateOrderCard(order, orderCard) {
            const statusText = statusMappings[order.status]?.text || statusMappings.default.text;
            const formattedDate = new Date(order.orderTime).toLocaleString('en-US', { hour12: false });
            orderCard.find('.card-header').html(
                `Order #${order.id} | Table: Fetching... | Date: ${formattedDate} | STATUS: ${statusText}`
            );
            fetchTableName(order.tableId).then(tableName => {
                orderCard.find('.card-header').html(
                    `Order #${order.id} | Table: ${tableName} | Date: ${formattedDate} | STATUS: ${statusText}`
                );
            });
            const sectionId = statusMappings[order.status]?.section || statusMappings.default.section;
            if (!orderCard.closest(`#${sectionId}`).length) {
                orderCard.detach().appendTo(`#${sectionId}`);
            }
        }

        function updateOrderInDOM(order) {
            const orderCard = $(`.order-card[data-order-id="${order.id}"]`);
            if (orderCard.length) {
                updateOrderCard(order, orderCard);
            } else {
                addNewOrderToDOM(order);
            }
        }

        function updateOrderStatus(orderId, newStatus) {
            let statusEnumValue = Object.keys(statusMappings).find(key => statusMappings[key].text.toLowerCase() === newStatus);
            console.log("Preparing to send update request for Order ID:", orderId, "with Status:", statusEnumValue);
            if (statusEnumValue === undefined) {
                console.error("Invalid status value for update:", newStatus);
                return; // Exit if status is invalid
            }

            $.ajax({
                url: 'https://restosolutionssaas.com/api/OrderApi/UpdateOrderStatus',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ OrderId: orderId, Status: statusEnumValue }),
                success: function () {
                    console.log("Successfully updated status for Order ID:", orderId);
                    const orderCard = $(`.order-card[data-order-id="${orderId}"]`);
                    if (orderCard.length) {
                        const formattedDate = new Date(orderCard.find('.card-header').text().split('|')[2].trim()).toLocaleString('en-US', { hour12: false });
                        const tableName = orderCard.find('.card-header').text().split('|')[1].trim();
                        orderCard.find('.card-header').html(
                            `Order #${orderId} | ${tableName} | Date: ${formattedDate} | STATUS: ${statusMappings[statusEnumValue].text}`
                        );
                        // Optionally, move the card to the correct section if status changes
                        const sectionId = statusMappings[statusEnumValue]?.section || statusMappings.default.section;
                        orderCard.detach().appendTo(`#${sectionId}`);
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error("AJAX Error:", textStatus, "Response Text:", jqXHR.responseText, "Error Thrown:", errorThrown);
                }
            });
        }

        function createOrderHtml(order) {
            const statusText = statusMappings[order.status]?.text || statusMappings.default.text;
            const color = statusMappings[order.status]?.color || statusMappings.default.color;
            const formattedDate = new Date(order.orderTime).toLocaleString('en-US', { hour12: false });
            const detailsHtml = order.orderDetails.map(detail => `<li>${detail.menuItem.name} x ${detail.quantity}</li>`).join("");
            const tableIdentifier = `Table: ${order.tableId}`;

            // Conditionally show the Cancel button if the status is not 'Completed' or 'Served'
            const cancelButtonHtml = (order.status === 2 || order.status === 3) ? "" :
                `<button type="button" class="btn btn-danger" data-status="cancelled">Cancel</button>`;

            return `
                    <div class="card mb-3 order-card bg-light" data-order-id="${order.id}" data-table-id="${order.tableId}" style="background-color: ${color};">
                        <div class="card-header">
                            Order #${order.id} | ${tableIdentifier} | Date: ${formattedDate} | STATUS: ${statusText}
                        </div>
                        <div class="card-body">
                            <ul>${detailsHtml}</ul>
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-warning" data-status="pending">Pending</button>
                                <button type="button" class="btn btn-primary" data-status="preparing">In Progress</button>
                                <button type="button" class="btn btn-success" data-status="completed">Completed</button>
                                ${cancelButtonHtml}
                            </div>
                        </div>
                    </div>`;
        }

        function fetchTableName(tableId) {
            return fetch(`https://restosolutionssaas.com/api/TablesApi/GetTableName/${tableId}`)
                .then(response => {
                    if (!response.ok) throw new Error('Failed to fetch table name');
                    return response.text();
                })
                .catch(error => {
                    console.error('Error fetching table name:', error);
                    return "Unknown";
                });
        }

        function updateAllTableNames() {
            $('.order-card').each(function () {
                const $card = $(this);
                const tableId = $card.data('table-id');
                if (tableId && tableId !== 'Unknown' && !$card.data('table-name-updated')) {
                    fetchTableName(tableId).then(tableName => {
                        $card.find('.card-header span').text(function (index, text) {
                            return text.replace(/Table: [^|]*/, `Table: ${tableName}`);
                        });
                        $card.data('table-name-updated', true);
                    }).catch(() => {
                        $card.find('.card-header span').text(function (index, text) {
                            return text.replace(/Table: [^|]*/, "Table: Unknown");
                        });
                    });
                }
            });
        }

        async function updateOrderStatusToCancelled(orderId) {
            const cancelledStatus = 4; // Assuming 4 represents "Cancelled"
            try {
                const response = await fetch(`https://restosolutionssaas.com/api/OrderApi/UpdateOrderStatus`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        OrderId: orderId,
                        Status: cancelledStatus
                    })
                });
                if (!response.ok) {
                    throw new Error(`Failed to update order status: ${response.statusText}`);
                }
                alert('Order cancelled successfully.');
                location.reload(); // Optionally, you might want to reload or update UI in a different way
            } catch (error) {
                console.error('Error updating order status to cancelled:', error);
                alert('Error cancelling order. Please try again.');
            }
        }

        function addWaiterCallToTable(tableId) {
            const tableIdentifier = `Table: ${tableId}`;
            const callId = Math.floor(Math.random() * 1000); // Generate a random Call ID for demonstration purposes

            const newCallHtml = `
                    <tr>
                        <td>${callId}</td>
                        <td>${tableIdentifier}</td>
                    </tr>
                `;

            console.log("Adding new waiter call to table with HTML:", newCallHtml);

            $('#waiterCalls tbody').append(newCallHtml);
        }

        // Clear existing dummy data from the table
        $('#waiterCalls tbody').empty();
    });
</script>


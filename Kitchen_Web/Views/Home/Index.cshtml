@using Microsoft.AspNetCore.Html;
@using System.Text;
@using Kitchen_Web.DTO;
@model Kitchen_Web.ViewModel.OutletViewModel;

@functions {
    public static DateTime ConvertToCorrectTimeZone(DateTime dateTimeWithOffset)
    {
        TimeZoneInfo istTimeZone = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
        DateTime dateTimeInIST = TimeZoneInfo.ConvertTime(dateTimeWithOffset, istTimeZone);
        return dateTimeInIST;
    }

    public static string RenderOrderCard(OrderDTO order, List<TableDTO> tables)
    {
        var tableIdentifier = tables.FirstOrDefault(t => t.Id == order.TableId)?.TableIdentifier ?? $"Unknown (ID: {order.TableId})";
        var orderTimeInIST = ConvertToCorrectTimeZone(order.OrderTime).ToString("yyyy-MM-dd HH:mm:ss");
        var statusText = order.Status.ToString().ToUpper();
        var html = new StringBuilder();
        html.Append($"<div class=\"card mb-3 order-card bg-dark text-light\" data-order-id=\"{order.Id}\" data-table-id=\"{order.TableId}\">");
        html.Append($"<div class=\"card-header d-flex justify-content-between align-items-center bg-warning text-dark\">");
        html.Append($"<span>Order #{order.Id} | Table: {tableIdentifier} | Date: {orderTimeInIST} | STATUS: {statusText}</span>");
        html.Append("</div><div class=\"card-body\"><ul class=\"mb-3\">");

        foreach (var detail in order.OrderDetails)
        {
            html.Append($"<li>{detail.MenuItemName} x {detail.Quantity}");

            if (!string.IsNullOrEmpty(detail.Note))
            {
                html.Append($"<br><small>Note: {detail.Note}</small>");
            }

            if (detail.ExtraItems != null && detail.ExtraItems.Any())
            {
                html.Append("<ul>");

                foreach (var extraItem in detail.ExtraItems)
                {
                    html.Append($"<li>{extraItem.Name} x {detail.Quantity} - {extraItem.Price:C2}</li>");
                }

                html.Append("</ul>");
            }

            html.Append("</li>");
        }

        html.Append("</ul><div class=\"btn-group\" role=\"group\" aria-label=\"Order Status\">");
        html.Append($"<button type=\"button\" class=\"btn btn-warning {(order.Status == OrderStatus.Pending ? "active" : "")}\" data-status=\"pending\">Pending</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-primary {(order.Status == OrderStatus.Preparing ? "active" : "")}\" data-status=\"preparing\">In Progress</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-success {(order.Status == OrderStatus.Ready ? "active" : "")}\" data-status=\"completed\">Completed</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-danger {(order.Status == OrderStatus.Ready || order.Status == OrderStatus.Served ? "active" : "")}\" data-status=\"cancelled\">Cancel</button>");

        html.Append("</div></div></div>");

        return html.ToString();
    }
}

@{
    Func<OrderDTO, string> renderOrderCard = (order) =>
        RenderOrderCard(order, Model.Tables);

    // Dummy data for waiter calls
    var waiterCalls = new List<(int CallId, int TableId, string TableIdentifier)>
    {
        (1, 101, "Table 1"),
        (2, 102, "Table 2"),
        (3, 103, "Table 3")
    };
}

<div class="container mt-5">
    <div class="row">
        <div class="col-md-9">
            <section id="pendingOrders">
                <h2>Pending Orders</h2>
                @foreach (var order in Model.Orders.Where(o => o.Status == OrderStatus.Pending))
                {
                    @Html.Raw(renderOrderCard(order))
                }
            </section>

            <section id="preparingOrders">
                <h2>Preparing Orders</h2>
                @foreach (var order in Model.Orders.Where(o => o.Status == OrderStatus.Preparing))
                {
                    @Html.Raw(renderOrderCard(order))
                }
            </section>

            <section id="readyOrders">
                <h2>Ready Orders</h2>
                @foreach (var order in Model.Orders.Where(o => o.Status == OrderStatus.Ready))
                {
                    @Html.Raw(renderOrderCard(order))
                }
            </section>

            <section id="servedOrders">
                <h2>Served Orders</h2>
                @foreach (var order in Model.Orders.Where(o => o.Status == OrderStatus.Served))
                {
                    @Html.Raw(renderOrderCard(order))
                }
            </section>
        </div>
        <div class="col-md-3">
            <section id="waiterCalls">
                <h2>Waiter Calls</h2>
                <table class="table table-dark table-striped">
                    <thead>
                        <tr>
                            <th>Call ID</th>
                            <th>Table</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var call in waiterCalls)
                        {
                            <tr>
                                <td>@call.CallId</td>
                                <td>@call.TableIdentifier</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </section>
        </div>
    </div>
</div>

<div class="container mt-3" id="cancelledOrdersSection">
    <h2>Recent Cancellations</h2>
    <div id="cancelledOrders"></div>
</div>

<!-- Footer -->
<footer class="footer mt-auto py-3 bg-dark text-white">
    <div class="container">
        <span class="text-muted">Quick Actions:</span>
        <!-- Quick action buttons, e.g., mark all orders as completed, print all pending orders, etc. -->
    </div>
</footer>
<script>
    $(document).ready(function () {
        $(document).on('click', '.btn-group .btn', function () {
            const $btn = $(this);
            const orderId = $btn.closest('.order-card').data('order-id');
            const newStatus = $btn.data('status');

            if ($btn.hasClass('disabled')) {
                console.error("Button is disabled for order ID:", orderId);
                return; // Prevent action if the button is disabled
            }

            console.log("Clicked button:", $btn.text().trim(), "for order ID:", orderId, "to change status to:", newStatus);

            if (newStatus === "cancelled") {
                updateOrderStatusToCancelled(orderId); // Call the cancellation function if "Cancel" is clicked
            } else if (newStatus !== undefined) {
                updateOrderStatus(orderId, newStatus);
            } else {
                console.error("Undefined status for order ID:", orderId);
            }
        });

        function updateOrderStatus(orderId, newStatus) {
            // Ensure statusMappings is defined correctly
            const statusMappings = {
                "pending": 0,
                "preparing": 1,
                "completed": 2,
                "served": 3,
                "cancelled": 4
            };

            let statusEnumValue = statusMappings[newStatus.toLowerCase()];
            console.log("Preparing to send update request for Order ID:", orderId, "with Status:", statusEnumValue);

            if (statusEnumValue === undefined) {
                console.error("Invalid status value for update:", newStatus);
                return;
            }

            fetch('https://restosolutionssaas.com/api/OrderApi/UpdateOrderStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ OrderId: orderId, Status: statusEnumValue })
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error("Failed to update order status");
                    }
                })
                .then(data => {
                    console.log("Order status updated successfully for order ID:", orderId, "with response:", data);
                    connection.invoke("SendOrderUpdate", { orderId: orderId, status: statusEnumValue })
                        .catch(err => console.error("Error sending update to hub for order ID:", orderId, "with error:", err));
                })
                .catch(err => {
                    console.error("Error updating order status for order ID:", orderId, "with error:", err);
                });
        }

        function updateOrderStatusToCancelled(orderId) {
            fetch('https://restosolutionssaas.com/api/OrderApi/CancelOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ OrderId: orderId })
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error("Failed to cancel order");
                    }
                })
                .then(data => {
                    console.log("Order cancelled successfully for order ID:", orderId, "with response:", data);
                    connection.invoke("SendOrderUpdate", { orderId: orderId, status: 4 })
                        .catch(err => console.error("Error sending cancellation update to hub for order ID:", orderId, "with error:", err));
                })
                .catch(err => {
                    console.error("Error cancelling order for order ID:", orderId, "with error:", err);
                });
        }

        document.addEventListener('click', function (event) {
            const button = event.target.closest('.btn-group .btn');
            if (!button) return;

            const orderCard = button.closest('.order-card');
            const orderId = orderCard.dataset.orderId;
            const newStatus = button.dataset.status;

            if (button.classList.contains('disabled')) {
                console.error("Button is disabled for order ID:", orderId);
                return;
            }

            console.log("Clicked button:", button.textContent.trim(), "for order ID:", orderId, "to change status to:", newStatus);

            if (newStatus === "cancelled") {
                updateOrderStatusToCancelled(orderId);
            } else if (newStatus !== undefined) {
                updateOrderStatus(orderId, newStatus);
            } else {
                console.error("Undefined status for order ID:", orderId);
            }
        });


        const notifiedCancellations = {};

        function handleCancellationAlert(order) {
            if (!notifiedCancellations[order.orderId]) {
                const cancellationAlert = `
                        <div class="alert alert-warning alert-dismissible fade show" role="alert">
                            Order #${order.orderId} has been cancelled by the customer.
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>`;
                document.getElementById('cancelledOrders').insertAdjacentHTML('afterbegin', cancellationAlert);
                notifiedCancellations[order.orderId] = true;

                setTimeout(() => {
                    const alert = document.querySelector(`.alert:contains('Order #${order.orderId}')`);
                    if (alert) {
                        alert.parentNode.removeChild(alert);
                    }
                    delete notifiedCancellations[order.orderId];
                }, 300000); // 5 minutes
            }
        }

        function updateOrderUI(order) {
            const cardElement = document.querySelector(`.order-card[data-order-id="${order.orderId}"]`);
            if (cardElement) {
                const statusText = mapEnumToStatusText(order.status);
                const color = getStatusColor(order.status);
                const formattedDate = new Date(order.orderTime).toLocaleString('en-US', { hour12: false }) || 'Invalid Date';
                const tableIdentifier = `Table: ${order.tableId || 'Unknown'}`;

                cardElement.style.backgroundColor = color;
                cardElement.querySelector('.card-header').textContent = `Order #${order.orderId} | ${tableIdentifier} | Date: ${formattedDate} | STATUS: ${statusText}`;
            } else {
                console.error("No order card found for order ID:", order.orderId);
            }
        }
    });
</script>



@using Microsoft.AspNetCore.Html;
@using System.Text;
@using Kitchen_Web.DTO;
@model Kitchen_Web.ViewModel.OutletViewModel;
@functions {
    public static DateTime ConvertToCorrectTimeZone(DateTime dateTimeWithOffset)
    {
        TimeZoneInfo istTimeZone = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
        DateTime dateTimeInIST = TimeZoneInfo.ConvertTime(dateTimeWithOffset, istTimeZone);
        return dateTimeInIST;
    }
}
@{
    var pendingOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Pending) ?? Enumerable.Empty<OrderDTO>();
    var preparingOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Preparing) ?? Enumerable.Empty<OrderDTO>();
    var readyOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Ready) ?? Enumerable.Empty<OrderDTO>();
    var servedOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Served) ?? Enumerable.Empty<OrderDTO>();
}
@{
    Func<IEnumerable<OrderDTO>, IHtmlContent> RenderOrders = (orders) =>
        {
    var html = new StringBuilder();
    foreach (var order in orders)
    {
        var tableIdentifier = Model.Tables.FirstOrDefault(t => t.Id == order.TableId)?.TableIdentifier ?? "Unknown";
        var orderTimeInIST = ConvertToCorrectTimeZone(order.OrderTime).ToString("yyyy-MM-dd HH:mm:ss");

        html.Append($"<div class=\"card mb-3 order-card bg-light\" data-order-id=\"{order.Id}\">");
        html.Append($"<div class=\"card-header d-flex justify-content-between align-items-center bg-warning text-dark\">");
        html.Append($"<span>Order #{order.Id} | Table: {tableIdentifier} | <span style=\"font-weight: lighter;\">Date: {orderTimeInIST}</span></span>");
        html.Append($"<span>STATUS: {order.Status.ToString().ToUpper()}</span>");
        html.Append("</div><div class=\"card-body\"><ul class=\"mb-3\">");

        foreach (var detail in order.OrderDetails)
        {
            html.Append($"<li>{detail.MenuItem?.Name} x {detail.Quantity}</li>");
        }

        // Include the status update buttons
        html.Append("</ul>");
        html.Append("<div class=\"btn-group\" role=\"group\" aria-label=\"Order Status\">");
        html.Append($"<button type=\"button\" class=\"btn btn-warning {(order.Status == OrderStatus.Pending ? "active" : "")}\" data-status=\"pending\">Pending</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-primary {(order.Status == OrderStatus.Preparing ? "active" : "")}\" data-status=\"in-progress\">In Progress</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-success {(order.Status == OrderStatus.Ready ? "active" : "")}\" data-status=\"completed\">Completed</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-danger delete-order\" data-order-id=\"{order.Id}\">Delete Order</button>");
        html.Append("</div></div></div>");
    }
    return new HtmlString(html.ToString());
        };
}

<div class="container mt-5">
    <section id="pendingOrders">
        <h2>Pending Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Pending))
    </section>

    <section id="preparingOrders">
        <h2>Preparing Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Preparing))
    </section>

    <section id="readyOrders">
        <h2>Ready Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Ready))
    </section>

    <section id="servedOrders">
        <h2>Served Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Served))
    </section>
</div>
<!-- Footer -->
<footer class="footer mt-auto py-3 bg-dark text-white">
    <div class="container">
        <span class="text-muted">Quick Actions:</span>
        <!-- Quick action buttons, e.g., mark all orders as completed, print all pending orders, etc. -->
    </div>
</footer>
<script>
    
    $(document).ready(function () {
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("https://restosolutionssaas.com/api/OrderApi/orderStatusHub")
            .configureLogging(signalR.LogLevel.Information)
            .withAutomaticReconnect()
            .build();

        connection.on("NewOrderPlaced", addNewOrderToDOM);
        connection.on("ReceiveOrderUpdate", updateOrderInDOM);
        connection.start().catch(err => console.error("SignalR connection error:", err));

        // Bind event handler for button clicks to handle both dynamically added and existing orders
        $(document).on('click', '.btn-group .btn', function () {
            const $btn = $(this);
            const $card = $btn.closest('.order-card');
            const orderId = $card.data('order-id');
            const newStatus = $btn.data('status');

            console.log("Button clicked:", $btn);  // Inspect the button element
            console.log("Order ID:", orderId, "Requested Status:", newStatus);  // Log the captured values

            if (newStatus === undefined) {
                console.error("Status undefined for order ID:", orderId);
            } else {
                updateOrderStatus(orderId, newStatus);
            }
        });


        function addNewOrderToDOM(order) {
            const orderHtml = createOrderHtml(order);
            const sectionId = mapStatusToSectionId(order.status);
            $('#' + sectionId).append(orderHtml);
        }

        function updateOrderInDOM(order) {
            const orderCard = $(`.order-card[data-order-id="${order.id}"]`);
            if (orderCard.length) {
                updateOrderCard(order, orderCard);
            } else {
                addNewOrderToDOM(order);
            }
        }

        function updateOrderStatus(orderId, newStatus) {
            const statusEnumValue = mapStatusToEnumValue(newStatus);
            console.log("Sending update request with data:", { OrderId: orderId, Status: statusEnumValue });  // Debugging line

            $.ajax({
                url: 'https://restosolutionssaas.com/api/OrderApi/UpdateOrderStatus',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ OrderId: orderId, Status: statusEnumValue }),
                success: function () {
                    console.log("Order status updated successfully.");
                },
                error: function (jqXHR) {
                    console.error("Error updating order status:", jqXHR.responseText);
                }
            });
        }

        function createOrderHtml(order) {
            const statusText = mapEnumToStatusText(order.status);
            const color = getStatusColor(order.status);
            const formattedDate = new Date(order.orderTime).toLocaleString('en-US', { hour12: false });
            const detailsHtml = order.orderDetails.map(detail => `<li>${detail.menuItem.name} x ${detail.quantity}</li>`).join("");

            return `
                <div class="card mb-3 order-card bg-light" data-order-id="${order.id}" style="background-color: ${color};">
                    <div class="card-header">
                        Order #${order.id} | Date: ${formattedDate} | STATUS: ${statusText}
                    </div>
                    <div class="card-body">
                        <ul>${detailsHtml}</ul>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-warning" data-status="pending">Pending</button>
                            <button type="button" class="btn btn-primary" data-status="preparing">In Progress</button>
                            <button type="button" class="btn btn-success" data-status="ready">Completed</button>
                        </div>
                    </div>
                </div>`;
        }

        function mapStatusToSectionId(status) {
            switch (status) {
                case 0: return 'pendingOrders';
                case 1: return 'preparingOrders';
                case 2: return 'readyOrders';
                case 3: return 'servedOrders';
                default: return 'unknownOrders';
            }
        }

        function mapStatusToEnumValue(status) {
            switch (status.toLowerCase()) {
                case 'pending': return 0;
                case 'in-progress':
                case 'preparing': return 1;  // Handle both "in-progress" and "preparing"
                case 'ready': return 2;
                case 'served': return 3;
                default:
                    console.error("Unhandled status:", status); // Log unhandled statuses
                    return undefined;
            }
        }


    });

    function updateOrderStatus(orderId, newStatus) {
        // Convert string status to your OrderStatus enum
        let statusEnumValue;
        switch (newStatus) {
            case 'pending':
                statusEnumValue = 0;
                break;
            case 'in-progress':
                statusEnumValue = 1;
                break;
            case 'completed':
                statusEnumValue = 2;
                break;
        }
        const requestData = {
            OrderId: orderId,
            Status: statusEnumValue
        };
        console.log("Sending update request with data:", requestData);
        $.ajax({
            headers: {
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            url: 'https://restosolutionssaas.com/api/OrderApi/UpdateOrderStatus',
            type: 'POST',
            data: JSON.stringify({
                OrderId: orderId,
                Status: statusEnumValue
            }),
            contentType: 'application/json',
            crossDomain: true,
            success: function (response) {
                console.log("Order status updated successfully.");
                location.reload(); // Refresh page to reflect changes
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("AJAX Error:", textStatus);
                console.error("Response Text:", jqXHR.responseText);
                console.error("Error Thrown:", errorThrown);
            }
        });

        $(document).on('click', '.delete-order', function () {
            const $btn = $(this);
            const orderId = $btn.data('order-id');
            console.log(`Delete button clicked for order ID: ${orderId}`);

            if (confirm('Are you sure you want to reject this order?')) {
                updateOrderStatusToRejected(orderId);
            }
        });

        function updateOrderStatusToRejected(orderId) {
            if (confirm('Are you sure you want to reject this order?')) {
                const rejectedStatus = 5;
                $.ajax({
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    url: 'https://restosolutionssaas.com/api/OrderApi/UpdateOrderStatus',
                    type: 'POST',
                    data: JSON.stringify({
                        OrderId: orderId,
                        Status: rejectedStatus
                    }),
                    contentType: 'application/json',
                    success: function (response) {
                        console.log("Order status updated to rejected successfully.");
                        location.reload(); // Refresh page to reflect changes
                    },
                    error: function (error) {
                        console.error("Error updating order status to rejected:", error.responseText);
                        alert('Error updating order status. Please try again.');
                    }
                });
            }
        }
    }
</script>
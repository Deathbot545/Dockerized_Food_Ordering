
@using Microsoft.AspNetCore.Html;
@using System.Text;
@using Kitchen_Web.DTO;
@model Kitchen_Web.ViewModel.OutletViewModel;
@functions {
    public static DateTime ConvertToCorrectTimeZone(DateTime dateTimeWithOffset)
    {
        TimeZoneInfo istTimeZone = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
        DateTime dateTimeInIST = TimeZoneInfo.ConvertTime(dateTimeWithOffset, istTimeZone);
        return dateTimeInIST;
    }
}
@{
    var pendingOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Pending) ?? Enumerable.Empty<OrderDTO>();
    var preparingOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Preparing) ?? Enumerable.Empty<OrderDTO>();
    var readyOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Ready) ?? Enumerable.Empty<OrderDTO>();
    var servedOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Served) ?? Enumerable.Empty<OrderDTO>();
}
@{
    Func<IEnumerable<OrderDTO>, IHtmlContent> RenderOrders = (orders) =>
        {
    var html = new StringBuilder();
    foreach (var order in orders)
    {
        var tableIdentifier = Model.Tables.FirstOrDefault(t => t.Id == order.TableId)?.TableIdentifier ?? "Unknown";
        var orderTimeInIST = ConvertToCorrectTimeZone(order.OrderTime).ToString("yyyy-MM-dd HH:mm:ss");

        html.Append($"<div class=\"card mb-3 order-card bg-light\" data-order-id=\"{order.Id}\">");
        html.Append($"<div class=\"card-header d-flex justify-content-between align-items-center bg-warning text-dark\">");
        html.Append($"<span>Order #{order.Id} | Table: {tableIdentifier} | <span style=\"font-weight: lighter;\">Date: {orderTimeInIST}</span></span>");
        html.Append($"<span>STATUS: {order.Status.ToString().ToUpper()}</span>");
        html.Append("</div><div class=\"card-body\"><ul class=\"mb-3\">");

        foreach (var detail in order.OrderDetails)
        {
            html.Append($"<li>{detail.MenuItem?.Name} x {detail.Quantity}</li>");
        }

        // Include the status update buttons
        html.Append("</ul>");
        html.Append("<div class=\"btn-group\" role=\"group\" aria-label=\"Order Status\">");
        html.Append($"<button type=\"button\" class=\"btn btn-warning {(order.Status == OrderStatus.Pending ? "active" : "")}\" data-status=\"pending\">Pending</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-primary {(order.Status == OrderStatus.Preparing ? "active" : "")}\" data-status=\"in-progress\">In Progress</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-success {(order.Status == OrderStatus.Ready ? "active" : "")}\" data-status=\"completed\">Completed</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-danger delete-order\" data-order-id=\"{order.Id}\">Delete Order</button>");
        html.Append("</div></div></div>");
    }
    return new HtmlString(html.ToString());
        };
}

<div class="container mt-5">
    <section id="pendingOrders">
        <h2>Pending Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Pending))
    </section>

    <section id="preparingOrders">
        <h2>Preparing Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Preparing))
    </section>

    <section id="readyOrders">
        <h2>Ready Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Ready))
    </section>

    <section id="servedOrders">
        <h2>Served Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Served))
    </section>
</div>
<!-- Footer -->
<footer class="footer mt-auto py-3 bg-dark text-white">
    <div class="container">
        <span class="text-muted">Quick Actions:</span>
        <!-- Quick action buttons, e.g., mark all orders as completed, print all pending orders, etc. -->
    </div>
</footer>
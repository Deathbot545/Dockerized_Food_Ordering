@using Microsoft.AspNetCore.Html;
@using System.Text;
@using Kitchen_Web.DTO;
@model Kitchen_Web.ViewModel.OutletViewModel;

@functions {
    public static DateTime ConvertToCorrectTimeZone(DateTime dateTimeWithOffset)
    {
        TimeZoneInfo istTimeZone = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
        DateTime dateTimeInIST = TimeZoneInfo.ConvertTime(dateTimeWithOffset, istTimeZone);
        return dateTimeInIST;
    }

    public static string RenderOrderCard(OrderDTO order, List<TableDTO> tables)
    {
        var tableIdentifier = tables.FirstOrDefault(t => t.Id == order.TableId)?.TableIdentifier ?? $"Unknown (ID: {order.TableId})";
        var orderTimeInIST = ConvertToCorrectTimeZone(order.OrderTime).ToString("yyyy-MM-dd HH:mm:ss");
        var statusText = order.Status.ToString().ToUpper();
        var html = new StringBuilder();
        html.Append($"<div class=\"card mb-3 order-card bg-light\" data-order-id=\"{order.Id}\" data-table-id=\"{order.TableId}\">");
        html.Append($"<div class=\"card-header d-flex justify-content-between align-items-center bg-warning text-dark\">");
        html.Append($"<span>Order #{order.Id} | Table: {tableIdentifier} | Date: {orderTimeInIST} | STATUS: {statusText}</span>");
        html.Append("</div><div class=\"card-body\"><ul class=\"mb-3\">");

        foreach (var detail in order.OrderDetails)
        {
            html.Append($"<li>{detail.MenuItem?.Name} x {detail.Quantity}</li>");
        }

        html.Append("</ul><div class=\"btn-group\" role=\"group\" aria-label=\"Order Status\">");
        html.Append($"<button type=\"button\" class=\"btn btn-warning {(order.Status == OrderStatus.Pending ? "active" : "")}\" data-status=\"pending\">Pending</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-primary {(order.Status == OrderStatus.Preparing ? "active" : "")}\" data-status=\"preparing\">In Progress</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-success {(order.Status == OrderStatus.Ready ? "active" : "")}\" data-status=\"completed\">Completed</button>");
        html.Append("</div></div></div>");

        return html.ToString();
    }
}


@{
    Func<OrderDTO, string> renderOrderCard = (order) =>
        RenderOrderCard(order, Model.Tables);
}

<div class="container mt-5">
    <section id="pendingOrders">
        <h2>Pending Orders</h2>
        @foreach (var order in Model.Orders.Where(o => o.Status == OrderStatus.Pending))
        {
            @Html.Raw(renderOrderCard(order))
        }
    </section>

    <section id="preparingOrders">
        <h2>Preparing Orders</h2>
        @foreach (var order in Model.Orders.Where(o => o.Status == OrderStatus.Preparing))
        {
            @Html.Raw(renderOrderCard(order))
        }
    </section>

    <section id="readyOrders">
        <h2>Ready Orders</h2>
        @foreach (var order in Model.Orders.Where(o => o.Status == OrderStatus.Ready))
        {
            @Html.Raw(renderOrderCard(order))
        }
    </section>

    <section id="servedOrders">
        <h2>Served Orders</h2>
        @foreach (var order in Model.Orders.Where(o => o.Status == OrderStatus.Served))
        {
            @Html.Raw(renderOrderCard(order))
        }
    </section>
</div>


<!-- Footer -->
<footer class="footer mt-auto py-3 bg-dark text-white">
    <div class="container">
        <span class="text-muted">Quick Actions:</span>
        <!-- Quick action buttons, e.g., mark all orders as completed, print all pending orders, etc. -->
    </div>
</footer>
<script>
    $(document).ready(function () {
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("https://restosolutionssaas.com/api/OrderApi/orderStatusHub")
            .configureLogging(signalR.LogLevel.Information)
            .withAutomaticReconnect()
            .build();

        connection.start().catch(err => console.error("SignalR connection error:", err));

        $(document).on('click', '.btn-group .btn', function () {
            const $btn = $(this);
            const orderId = $btn.closest('.order-card').data('order-id');
            const newStatus = $btn.data('status');

            console.log("Clicked button:", $btn.text().trim(), "for order ID:", orderId, "to change status to:", newStatus);

            if (newStatus === undefined) {
                console.error("Undefined status for order ID:", orderId);
                return; // Prevent sending undefined status
            }

            updateOrderStatus(orderId, newStatus);
        });
       
        // Handle new orders and updates
        connection.on("NewOrderPlaced", function (order) {
            handleOrder(order, false);
        });

        connection.on("ReceiveOrderUpdate", function (order) {
            handleOrder(order, true);
        });

        // Function to handle new orders and updates
        function handleOrder(order, isUpdate) {
            const existingCard = $(`.order-card[data-order-id="${order.id}"]`);
            if (existingCard.length === 0 && !isUpdate) {
                // If it's a new order and no card exists
                addNewOrderToDOM(order);
            } else if (existingCard.length > 0 && isUpdate) {
                // If it's an update and the card exists
                updateOrderCard(order, existingCard);
            }
        }

        function addNewOrderToDOM(order) {
            const orderHtml = createOrderHtml(order);
            const sectionId = mapStatusToSectionId(order.status);
            $('#' + sectionId).append(orderHtml);
        }

        function updateOrderCard(order, orderCard) {
            const statusText = mapEnumToStatusText(order.status);
            const formattedDate = new Date(order.orderTime).toLocaleString('en-US', { hour12: false });
            orderCard.find('.card-header').html(
                `Order #${order.id} | Table: Fetching... | Date: ${formattedDate} | STATUS: ${statusText}`
            );
            fetchTableName(order.tableId).then(tableName => {
                orderCard.find('.card-header').html(
                    `Order #${order.id} | Table: ${tableName} | Date: ${formattedDate} | STATUS: ${statusText}`
                );
            });
            const sectionId = mapStatusToSectionId(order.status);
            if (!orderCard.closest(`#${sectionId}`).length) {
                orderCard.detach().appendTo(`#${sectionId}`);
            }
        }
        function updateOrderInDOM(order) {
            const orderCard = $(`.order-card[data-order-id="${order.id}"]`);
            if (orderCard.length) {
                updateOrderCard(order, orderCard);
            } else {
                addNewOrderToDOM(order);
            }
        } function updateOrderStatus(orderId, newStatus) {
            const statusEnumValue = mapStatusToEnumValue(newStatus);
            console.log("Preparing to send update request for Order ID:", orderId, "with Status:", statusEnumValue);

            $.ajax({
                url: 'https://restosolutionssaas.com/api/OrderApi/UpdateOrderStatus',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ OrderId: orderId, Status: statusEnumValue }),
                success: function () {
                    console.log("Successfully updated status for Order ID:", orderId);
                },
                error: function (jqXHR) {
                    console.error("Failed to update status for Order ID:", orderId, "Error:", jqXHR.responseText);
                }
            });
        }

        function createOrderHtml(order) {
            const statusText = mapEnumToStatusText(order.status);
            const color = getStatusColor(order.status);
            const formattedDate = new Date(order.orderTime).toLocaleString('en-US', { hour12: false });
            const detailsHtml = order.orderDetails.map(detail => `<li>${detail.menuItem.name} x ${detail.quantity}</li>`).join("");
            const tableIdentifier = `Table: ${order.tableId}`;

            return `
                <div class="card mb-3 order-card bg-light" data-order-id="${order.id}" data-table-id="${order.tableId}" style="background-color: ${color};">
                    <div class="card-header">
                        Order #${order.id} | ${tableIdentifier} | Date: ${formattedDate} | STATUS: ${statusText}
                    </div>
                    <div class="card-body">
                        <ul>${detailsHtml}</ul>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-warning" data-status="pending">Pending</button>
                            <button type="button" class="btn btn-primary" data-status="preparing">In Progress</button>
                            <button type="button" the "btn btn-success" data-status="completed">Completed</button>
                        </div>
                    </div>
                </div>`;
        }

        function fetchTableName(tableId) {
            return fetch(`https://restosolutionssaas.com/api/TablesApi/GetTableName/${tableId}`)
                .then(response => {
                    if (!response.ok) throw new Error('Failed to fetch table name');
                    return response.text();
                })
                .catch(error => {
                    console.error('Error fetching table name:', error);
                    return "Unknown";
                });
        }

        function mapStatusToSectionId(status) {
            switch (status) {
                case 0: return 'pendingOrders';
                case 1: return 'preparingOrders';
                case 2: return 'readyOrders';
                case 3: return 'servedOrders';
                default: return 'unknownOrders';
            }
        }

        function mapEnumToStatusText(status) {
            switch (status) {
                case 0: return "Pending";
                case 1: return "In Progress";
                case 2: return "Completed";
                case 3: return "Served";
                default: return "Unknown";
            }
        }

        function getStatusColor(status) {
            switch (status) {
                case 0: return "#FFDDC1"; // Light orange for pending
                case 1: return "#C1CEFF"; // Light blue for in progress
                case 2: return "#C1FFD7"; // Light green for completed
                case 3: return "#FFC1C1"; // Light red for served
                default: return "#FFFFFF"; // White for unknown
            }
        }

        function mapStatusToEnumValue(status) {
            switch (status.toLowerCase()) {
                case 'pending': return 0;
                case 'in-progress': return 1;
                case 'completed': return 2;
                case 'ready': return 2; // Ready is considered as completed
                case 'served': return 3;
                default: return undefined; // Handle undefined status
            }
        }

       
    });
</script>
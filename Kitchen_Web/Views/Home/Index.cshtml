
@*@using Microsoft.AspNetCore.Html;
@using System.Text;
@using Order_API.DTO;
@using Order_API.Models;
@functions {
    public static DateTime ConvertToCorrectTimeZone(DateTime dateTimeWithOffset)
    {
        TimeZoneInfo istTimeZone = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
        DateTime dateTimeInIST = TimeZoneInfo.ConvertTime(dateTimeWithOffset, istTimeZone);
        return dateTimeInIST;
    }
}
@{
    var pendingOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Pending) ?? Enumerable.Empty<OrderDTO>();
    var preparingOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Preparing) ?? Enumerable.Empty<OrderDTO>();
    var readyOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Ready) ?? Enumerable.Empty<OrderDTO>();
    var servedOrders = Model.Orders?.Where(o => o.Status == OrderStatus.Served) ?? Enumerable.Empty<OrderDTO>();
}
@{
    Func<IEnumerable<OrderDTO>, IHtmlContent> RenderOrders = (orders) =>
        {
    var html = new StringBuilder();
    foreach (var order in orders)
    {
        var tableIdentifier = Model.Tables.FirstOrDefault(t => t.Id == order.TableId)?.TableIdentifier ?? "Unknown";
        var orderTimeInIST = ConvertToCorrectTimeZone(order.OrderTime).ToString("yyyy-MM-dd HH:mm:ss");

        html.Append($"<div class=\"card mb-3 order-card bg-light\" data-order-id=\"{order.Id}\">");
        html.Append($"<div class=\"card-header d-flex justify-content-between align-items-center bg-warning text-dark\">");
        html.Append($"<span>Order #{order.Id} | Table: {tableIdentifier} | <span style=\"font-weight: lighter;\">Date: {orderTimeInIST}</span></span>");
        html.Append($"<span>STATUS: {order.Status.ToString().ToUpper()}</span>");
        html.Append("</div><div class=\"card-body\"><ul class=\"mb-3\">");

        foreach (var detail in order.OrderDetails)
        {
            html.Append($"<li>{detail.MenuItem?.Name} x {detail.Quantity}</li>");
        }

        // Include the status update buttons
        html.Append("</ul>");
        html.Append("<div class=\"btn-group\" role=\"group\" aria-label=\"Order Status\">");
        html.Append($"<button type=\"button\" class=\"btn btn-warning {(order.Status == OrderStatus.Pending ? "active" : "")}\" data-status=\"pending\">Pending</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-primary {(order.Status == OrderStatus.Preparing ? "active" : "")}\" data-status=\"in-progress\">In Progress</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-success {(order.Status == OrderStatus.Ready ? "active" : "")}\" data-status=\"completed\">Completed</button>");
        html.Append($"<button type=\"button\" class=\"btn btn-danger delete-order\" data-order-id=\"{order.Id}\">Delete Order</button>");
        html.Append("</div></div></div>");
    }
    return new HtmlString(html.ToString());
        };
}

<div class="container mt-5">
    <section id="pendingOrders">
        <h2>Pending Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Pending))
    </section>

    <section id="preparingOrders">
        <h2>Preparing Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Preparing))
    </section>

    <section id="readyOrders">
        <h2>Ready Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Ready))
    </section>

    <section id="servedOrders">
        <h2>Served Orders</h2>
        @RenderOrders(Model.Orders.Where(o => o.Status == OrderStatus.Served))
    </section>
</div>
<!-- Footer -->
<footer class="footer mt-auto py-3 bg-dark text-white">
    <div class="container">
        <span class="text-muted">Quick Actions:</span>
        <!-- Quick action buttons, e.g., mark all orders as completed, print all pending orders, etc. -->
    </div>
</footer>*@
<script>
    
    $(document).ready(function () {
        console.log("Document ready function started.");

        // Defining the mapStatusToSectionId function within $(document).ready to ensure scope is correct
        function mapStatusToSectionId(status) {
            switch (status) {
                case 0: return 'pendingOrders';
                case 1: return 'preparingOrders';
                case 2: return 'readyOrders';
                case 3: return 'servedOrders';
                default: return 'unknownOrders'; // Handle unknown or new statuses
            }
        }

        // Ensuring mapEnumToStatusText is also within $(document).ready
        function mapEnumToStatusText(status) {
            console.log(`mapEnumToStatusText called with status: ${status}`);
            switch (status) {
                case 0: return 'Pending';
                case 1: return 'Preparing';
                case 2: return 'Ready';
                case 3: return 'Served';
                default: return 'Unknown'; // Handle cases where status is outside known values
            }
        }

        console.log(mapEnumToStatusText(0)); // Testing the function

        // Your existing SignalR connection setup
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("https://restosolutionssaas.com/api/OrderApi/orderStatusHub")
            .configureLogging(signalR.LogLevel.Information)
            .withAutomaticReconnect()
            .build();

        // Handlers for SignalR events
        connection.on("NewOrderPlaced", function (order) {
            console.log("New order received", order);
            addNewOrderToDOM(order);
        });

        connection.on("ReceiveOrderUpdate", function (order) {
            console.log("Order status update received", order);
            updateOrderInDOM(order);
        });

        connection.start().catch(function (err) {
            console.error(err.toString());
        });

        $('.btn-group .btn').click(function () {
            const $btn = $(this);
            const $card = $btn.closest('.order-card');
            const orderId = $card.data('order-id');
            const newStatus = $btn.data('status');

            updateOrderStatus(orderId, newStatus);
        });

        function addNewOrderToDOM(order) {
            var sectionId = mapStatusToSectionId(order.status);
            var orderHtml = createOrderHtml(order);
            $('#' + sectionId).append(orderHtml);
        }

        function createOrderHtml(order) {
            console.log("Creating HTML for order:", order);

            // Date formatting
            let orderDate = new Date(order.orderTime); // Adjust this based on the actual property name
            let formattedDate = orderDate.toLocaleDateString('en-US') + ' ' + orderDate.toLocaleTimeString('en-US');

            // Ensure details are structured as expected, similar to OrderDetailDTO
            let detailsHtml = order.details.map(detail => `<li>${detail.name} x ${detail.qty}</li>`).join("");

            return `
            <div class="card mb-3 order-card bg-light" data-order-id="${order.orderId}">
                <div class="card-header d-flex justify-content-between align-items-center bg-warning text-dark">
                    <span>Order #${order.orderId} | Table: ${order.tableId} | Date: ${formattedDate}</span>
                    <span>STATUS: ${mapEnumToStatusText(order.status)}</span>
                </div>
                <div class="card-body">
                    <ul class="mb-3">${detailsHtml}</ul>
                    <div class="btn-group" role="group" aria-label="Order Status">
                        <button type="button" class="btn btn-warning" data-status="pending" data-order-id="${order.orderId}">Pending</button>
                        <button type="button" class="btn btn-primary" data-status="in-progress" data-order-id="${order.orderId}">In Progress</button>
                        <button type="button" class="btn btn-success" data-status="completed" data-order-id="${order.orderId}">Completed</button>
                        <button type="button" class="btn btn-danger delete-order" data-order-id="${order.orderId}">Delete Order</button>
                    </div>
                </div>
            </div>
            `;
        }

        // Use delegated events for dynamically added elements
        $(document).on('click', '.btn-group .btn', function () {
            const $btn = $(this);
            const orderId = $btn.data('order-id');
            const newStatus = $btn.data('status');
            updateOrderStatus(orderId, newStatus);
        });

        function updateOrderInDOM(order) {
            var orderCard = $(`.order-card[data-order-id="${order.id}"]`);
            if (!orderCard.length) {
                // If the order card doesn't exist, it might be a new order.
                addNewOrderToDOM(order);
                return;
            }

            // If it exists, update its contents or status.
            updateOrderCard(order, orderCard);
        }

        function updateOrderCard(order, orderCard) {
            // Update the status text. Assume a span with class 'order-status' displays the status.
            orderCard.find('.order-status').text(mapEnumToStatusText(order.status));

            // Check if the order needs to be moved to another section based on its new status.
            var currentSectionId = mapStatusToSectionId(order.status);
            if (!orderCard.closest(`#${currentSectionId}`).length) {
                // If the order card is not in the correct section, move it.
                orderCard.detach();
                $(`#${currentSectionId}`).append(orderCard);
            }
        }
    });

    function updateOrderStatus(orderId, newStatus) {
        // Convert string status to your OrderStatus enum
        let statusEnumValue;
        switch (newStatus) {
            case 'pending':
                statusEnumValue = 0;
                break;
            case 'in-progress':
                statusEnumValue = 1;
                break;
            case 'completed':
                statusEnumValue = 2;
                break;
        }

        $.ajax({
            headers: {
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            url: 'https://restosolutionssaas.com/api/OrderApi/UpdateOrderStatus',
            type: 'POST',
            data: JSON.stringify({
                OrderId: orderId,
                Status: statusEnumValue
            }),
            contentType: 'application/json',
            crossDomain: true,
            success: function (response) {
                console.log("Order status updated successfully.");
                location.reload(); // Refresh page to reflect changes
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("AJAX Error:", textStatus);
                console.error("Response Text:", jqXHR.responseText);
                console.error("Error Thrown:", errorThrown);
            }
        });

        $(document).on('click', '.delete-order', function () {
            const $btn = $(this);
            const orderId = $btn.data('order-id');
            console.log(`Delete button clicked for order ID: ${orderId}`);

            if (confirm('Are you sure you want to reject this order?')) {
                updateOrderStatusToRejected(orderId);
            }
        });



        function updateOrderStatusToRejected(orderId) {
            if (confirm('Are you sure you want to reject this order?')) {
                const rejectedStatus = 5;
                $.ajax({
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    url: 'https://restosolutionssaas.com/api/OrderApi/UpdateOrderStatus',
                    type: 'POST',
                    data: JSON.stringify({
                        OrderId: orderId,
                        Status: rejectedStatus
                    }),
                    contentType: 'application/json',
                    success: function (response) {
                        console.log("Order status updated to rejected successfully.");
                        location.reload(); // Refresh page to reflect changes
                    },
                    error: function (error) {
                        console.error("Error updating order status to rejected:", error.responseText);
                        alert('Error updating order status. Please try again.');
                    }
                });
            }
        }
    }
</script>